import React, { useState, useEffect } from 'react';
import { useAuth } from '../lib/auth';
import { useRouter } from 'next/router';
import { supabase } from '../lib/supabase';
import { 
  Shield, 
  Upload, 
  Download, 
  BookOpen, 
  Calendar, 
  CheckCircle, 
  Building,
  Phone,
  Mail,
  MapPin,
  Globe,
  Clock,
  Facebook,
  Instagram,
  Twitter,
  Linkedin,
  Save,
  Edit,
  X
} from 'lucide-react';
import Link from 'next/link';

interface BusinessProfile {
  id?: string; // Optional since new profiles won't have an ID yet
  name: string;
  description: string;
  logo_url: string;
  website: string;
  phone: string;
  email: string;
  address: string;
  city: string;
  state: string;
  zip_code: string;
  operating_hours: {
    monday: { open: string; close: string; closed: boolean };
    tuesday: { open: string; close: string; closed: boolean };
    wednesday: { open: string; close: string; closed: boolean };
    thursday: { open: string; close: string; closed: boolean };
    friday: { open: string; close: string; closed: boolean };
    saturday: { open: string; close: string; closed: boolean };
    sunday: { open: string; close: string; closed: boolean };
  };
  social_media: {
    facebook: string;
    instagram: string;
    twitter: string;
    linkedin: string;
  };
  services: string[];
  specialties: string[];
  certifications: string[];
  created_at: string;
  updated_at: string;
}

export default function Dashboard() {
  const { user, loading } = useAuth();
  const router = useRouter();
  const [logoFile, setLogoFile] = useState<File | null>(null);
  const [uploading, setUploading] = useState(false);
  const [message, setMessage] = useState('');
  const [profile, setProfile] = useState<BusinessProfile | null>(null);
  const [saving, setSaving] = useState(false);
  const [newService, setNewService] = useState('');
  const [newSpecialty, setNewSpecialty] = useState('');
  const [newCertification, setNewCertification] = useState('');
  const [isEditing, setIsEditing] = useState(false);

  // Redirect if not authenticated
  useEffect(() => {
    if (!loading && !user) {
      router.push('/login');
    }
  }, [user, loading, router]);

  // Fetch business profile
  useEffect(() => {
    if (user && supabase) {
      fetchBusinessProfile();
    }
  }, [user]);

  const fetchBusinessProfile = async () => {
    if (!user || !supabase) return;

    try {
      // First, check if the businesses table exists and has the right structure
      const { data, error } = await supabase
        .from('businesses')
        .select('*')
        .eq('user_id', user.id)
        .single();

      if (error) {
        console.log('Error fetching business profile:', error);
        
        // If table doesn't exist, show setup message
        if (error.code === '42P01') {
          console.log('Businesses table does not exist yet');
          setMessage('Business profile system is being set up. Please check back later.');
          return;
        }
        
        // If table exists but no profile found, create a local profile
        if (error.code === 'PGRST116') {
          console.log('Business profile not found, creating local default profile');
          createLocalDefaultProfile();
          return;
        }
        
        // For other errors, still create a local profile
        console.log('Creating local default profile due to error');
        createLocalDefaultProfile();
        return;
      }

      if (data) {
        console.log('Business profile found:', data);
        setProfile(data);
        setIsEditing(false); // Start in view mode if profile exists
      } else {
        console.log('No business profile data, creating local default');
        createLocalDefaultProfile();
      }
    } catch (error) {
      console.error('Unexpected error in fetchBusinessProfile:', error);
      createLocalDefaultProfile();
    }
  };

  const createLocalDefaultProfile = () => {
    // Create default profile without ID (will be generated by database)
    const defaultProfile: Omit<BusinessProfile, 'id'> = {
      name: user?.company_name || 'Your Company',
      description: '',
      logo_url: '',
      website: user?.business_link || '',
      phone: '',
      email: user?.email || '',
      address: '',
      city: '',
      state: '',
      zip_code: '',
      operating_hours: {
        monday: { open: '09:00', close: '17:00', closed: false },
        tuesday: { open: '09:00', close: '17:00', closed: false },
        wednesday: { open: '09:00', close: '17:00', closed: false },
        thursday: { open: '09:00', close: '17:00', closed: false },
        friday: { open: '09:00', close: '17:00', closed: false },
        saturday: { open: '09:00', close: '17:00', closed: false },
        sunday: { open: '09:00', close: '17:00', closed: false },
      },
      social_media: {
        facebook: '',
        instagram: '',
        twitter: '',
        linkedin: '',
      },
      services: [],
      specialties: [],
      certifications: [],
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
    };
    
    // Set profile with a temporary ID for local state management
    setProfile({
      ...defaultProfile,
      id: 'temp-' + Date.now() // Temporary ID for local state
    });
    setIsEditing(true); // Start in edit mode for new profiles
  };

  const handleLogoUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      setLogoFile(file);
      setMessage('');
    }
  };

  const uploadLogo = async () => {
    if (!logoFile || !user || !supabase) return;

    setUploading(true);
    try {
      const fileExt = logoFile.name.split('.').pop();
      const fileName = `${user.id}-logo.${fileExt}`;
      const filePath = `logos/${fileName}`;

      const { error: uploadError } = await supabase.storage
        .from('tca-assets')
        .upload(filePath, logoFile);

      if (uploadError) throw uploadError;

      const { data: { publicUrl } } = supabase.storage
        .from('tca-assets')
        .getPublicUrl(filePath);

      // Update business profile with logo URL
      if (profile) {
        setProfile({ ...profile, logo_url: publicUrl });
      }

      setMessage('Logo uploaded successfully!');
      setLogoFile(null);
    } catch (error) {
      setMessage('Error uploading logo. Please try again.');
      console.error('Upload error:', error);
    } finally {
      setUploading(false);
    }
  };

  const handleInputChange = (field: string, value: any) => {
    setProfile(prev => prev ? { ...prev, [field]: value } : null);
  };

  const handleOperatingHoursChange = (day: string, field: string, value: any) => {
    setProfile(prev => prev ? {
      ...prev,
      operating_hours: {
        ...prev.operating_hours,
        [day]: {
          ...prev.operating_hours[day as keyof typeof prev.operating_hours],
          [field]: value
        }
      }
    } : null);
  };

  const handleSocialMediaChange = (platform: string, value: string) => {
    setProfile(prev => prev ? {
      ...prev,
      social_media: {
        ...prev.social_media,
        [platform]: value
      }
    } : null);
  };

  const addItem = (field: 'services' | 'specialties' | 'certifications', value: string) => {
    if (!value.trim()) return;
    
    setProfile(prev => prev ? {
      ...prev,
      [field]: [...prev[field], value.trim()]
    } : null);
    
    // Clear input
    if (field === 'services') setNewService('');
    if (field === 'specialties') setNewSpecialty('');
    if (field === 'certifications') setNewCertification('');
  };

  const removeItem = (field: 'services' | 'specialties' | 'certifications', index: number) => {
    setProfile(prev => prev ? {
      ...prev,
      [field]: prev[field].filter((_, i) => i !== index)
    } : null);
  };

  const saveProfile = async () => {
    if (!profile || !user || !supabase) return;

    setSaving(true);
    try {
      // Create profile data without temporary id
      const profileData: any = {
        ...profile,
        user_id: user.id,
        updated_at: new Date().toISOString()
      };

      // Remove temporary id if present
      if (profileData.id && profileData.id.startsWith('temp-')) {
        delete profileData.id;
      }

      console.log('Attempting to save profile data:', profileData);

      const { data: savedProfile, error } = await supabase
        .from('businesses')
        .upsert(profileData, { onConflict: 'user_id' })
        .select()
        .single();

      if (error) {
        console.error('Database error during save:', error);
        
        // If the businesses table doesn't exist, show a helpful message
        if (error.code === '42P01') {
          setMessage('Business profile system is not set up yet. Please contact support.');
        } else {
          throw error;
        }
        return;
      }

      // Update local profile with saved data (including real ID)
      if (savedProfile) {
        console.log('Profile saved successfully:', savedProfile);
        setProfile(savedProfile);
      }

      setMessage('Profile saved successfully!');
      setIsEditing(false); // Switch to view mode after saving
    } catch (error) {
      setMessage('Error saving profile. Please try again.');
      console.error('Save error:', error);
    } finally {
      setSaving(false);
    }
  };

  const getMembershipStatus = () => {
    if (!user?.membership_tier || user.membership_tier === 'free') return 'Free Member';
    
    if (!user?.membership_expires) return 'Yearly Member';
    
    const expiryDate = new Date(user.membership_expires);
    const now = new Date();
    
    if (expiryDate < now) {
      return 'Yearly Expired';
    } else if (expiryDate.getTime() - now.getTime() < 30 * 24 * 60 * 60 * 1000) {
      return 'Yearly Active';
    } else {
      return 'Yearly Active';
    }
  };

  const getMembershipStatusColor = (status: string) => {
    switch (status) {
      case 'Yearly Active': return 'text-green-600 bg-green-100';
      case 'Yearly Expiring Soon': return 'text-yellow-600 bg-yellow-100';
      case 'Yearly Expired': return 'text-red-600 bg-red-100';
      case 'Free Member': return 'text-blue-600 bg-blue-100';
      case 'Yearly Member': return 'text-purple-600 bg-purple-100';
      default: return 'text-gray-600 bg-gray-100';
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (!user) {
    return null;
  }

  if (!profile && !message?.includes('being set up')) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p>Loading business profile...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900">
            Welcome back, {user.company_name || 'Member'}!
          </h1>
          <p className="mt-2 text-gray-600">
            Manage your TCA membership, upload assets, and access exclusive resources.
          </p>
        </div>

        {message && (
          <div className="mb-6 p-4 bg-green-50 border border-green-200 text-green-700 rounded-md">
            {message}
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Company Logo Upload */}
          <div className="card">
            <div className="flex items-center space-x-3 mb-4">
              <Upload className="h-6 w-6 text-primary" />
              <h2 className="text-xl font-semibold text-gray-900">Company Logo</h2>
            </div>
            
            {user.logo_url ? (
              <div className="mb-4">
                <img 
                  src={user.logo_url} 
                  alt="Company Logo" 
                  className="h-20 w-auto rounded-lg border border-gray-200"
                />
              </div>
            ) : (
              <p className="text-gray-600 mb-4">No logo uploaded yet.</p>
            )}

            <div className="space-y-4">
              <input
                type="file"
                accept="image/*"
                onChange={handleLogoUpload}
                className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary file:text-white hover:file:bg-primary-dark"
              />
              {logoFile && (
                <button
                  onClick={uploadLogo}
                  disabled={uploading}
                  className="btn-primary w-full"
                >
                  {uploading ? 'Uploading...' : 'Upload Logo'}
                </button>
              )}
            </div>
          </div>


        </div>

        {/* Business Profile Section */}
        {profile ? (
          <div className="mt-8">
            <div className="card">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-semibold text-gray-900">Business Profile</h2>
                <div className="flex space-x-3">
                  {isEditing ? (
                    <>
                      <button
                        onClick={() => setIsEditing(false)}
                        className="btn-secondary flex items-center space-x-2"
                      >
                        <X className="h-5 w-5" />
                        <span>Cancel</span>
                      </button>
                      <button
                        onClick={saveProfile}
                        disabled={saving}
                        className="btn-primary flex items-center space-x-2"
                      >
                        {saving ? (
                          <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                        ) : (
                          <Save className="h-5 w-5" />
                        )}
                        <span>{saving ? 'Saving...' : 'Save Profile'}</span>
                      </button>
                    </>
                  ) : (
                    <button
                      onClick={() => setIsEditing(true)}
                      className="btn-primary flex items-center space-x-2"
                    >
                      <Edit className="h-5 w-5" />
                      <span>Edit Profile</span>
                    </button>
                  )}
                </div>
              </div>

              <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
              {/* Left Column - Basic Info & Logo */}
              <div className="lg:col-span-1 space-y-6">
                {/* Basic Information */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Basic Information</h3>
                  <div className="space-y-4">
                                         <div>
                       <label className="block text-sm font-medium text-gray-700 mb-1">
                         Company Name
                       </label>
                       <input
                         type="text"
                         value={profile?.name || ''}
                         onChange={(e) => handleInputChange('name', e.target.value)}
                         className="input-field"
                         placeholder="Enter company name"
                         disabled={!isEditing}
                       />
                     </div>

                                         <div>
                       <label className="block text-sm font-medium text-gray-700 mb-1">
                         Description
                       </label>
                       <textarea
                         value={profile?.description || ''}
                         onChange={(e) => handleInputChange('description', e.target.value)}
                         rows={4}
                         className="input-field"
                         placeholder="Describe your business and services"
                         disabled={!isEditing}
                       />
                     </div>

                                         <div>
                       <label className="block text-sm font-medium text-gray-700 mb-1">
                         Website
                       </label>
                       <div className="relative">
                         <Globe className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
                         <input
                           type="url"
                           value={profile?.website || ''}
                           onChange={(e) => handleInputChange('website', e.target.value)}
                           className="input-field pl-10"
                           placeholder="https://your-website.com"
                           disabled={!isEditing}
                         />
                       </div>
                     </div>
                  </div>
                </div>
              </div>

              {/* Right Column - Contact & Details */}
              <div className="lg:col-span-2 space-y-6">
                {/* Contact Information */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Contact Information</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Phone Number
                      </label>
                      <div className="relative">
                        <Phone className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
                        <input
                          type="tel"
                          value={profile.phone}
                          onChange={(e) => handleInputChange('phone', e.target.value)}
                          className="input-field pl-10"
                          placeholder="(555) 123-4567"
                          disabled={!isEditing}
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Email
                      </label>
                      <div className="relative">
                        <Mail className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
                        <input
                          type="email"
                          value={profile.email}
                          onChange={(e) => handleInputChange('email', e.target.value)}
                          className="input-field pl-10"
                          placeholder="contact@company.com"
                          disabled={!isEditing}
                        />
                      </div>
                    </div>

                    <div className="md:col-span-2">
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Address
                      </label>
                      <div className="relative">
                        <MapPin className="absolute left-3 top-3 h-5 w-5 text-gray-400" />
                        <input
                          type="text"
                          value={profile.address}
                          onChange={(e) => handleInputChange('address', e.target.value)}
                          className="input-field pl-10"
                          placeholder="123 Business St"
                          disabled={!isEditing}
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        City
                      </label>
                      <input
                        type="text"
                        value={profile.city}
                        onChange={(e) => handleInputChange('city', e.target.value)}
                        className="input-field"
                        placeholder="City"
                        disabled={!isEditing}
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        State
                      </label>
                      <input
                        type="text"
                        value={profile.state}
                        onChange={(e) => handleInputChange('state', e.target.value)}
                        className="input-field"
                        placeholder="State"
                        disabled={!isEditing}
                      />
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        ZIP Code
                      </label>
                      <input
                        type="text"
                        value={profile.zip_code}
                        onChange={(e) => handleInputChange('zip_code', e.target.value)}
                        className="input-field"
                        placeholder="12345"
                        disabled={!isEditing}
                      />
                    </div>
                  </div>
                </div>

                {/* Operating Hours */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Operating Hours</h3>
                  <div className="space-y-3">
                    {Object.entries(profile.operating_hours).map(([day, hours]) => (
                      <div key={day} className="flex items-center space-x-4">
                        <div className="w-20 text-sm font-medium text-gray-700 capitalize">
                          {day}
                        </div>
                        
                        <label className="flex items-center space-x-2">
                          <input
                            type="checkbox"
                            checked={!hours.closed}
                            onChange={(e) => handleOperatingHoursChange(day, 'closed', !e.target.checked)}
                            className="rounded border-gray-300 text-primary focus:ring-primary"
                            disabled={!isEditing}
                          />
                          <span className="text-sm text-gray-600">Open</span>
                        </label>
                        
                        {!hours.closed && (
                          <>
                            <input
                              type="time"
                              value={hours.open}
                              onChange={(e) => handleOperatingHoursChange(day, 'open', e.target.value)}
                              className="input-field text-sm"
                              disabled={!isEditing}
                            />
                            <span className="text-gray-500">to</span>
                            <input
                              type="time"
                              value={hours.close}
                              onChange={(e) => handleOperatingHoursChange(day, 'close', e.target.value)}
                              className="input-field text-sm"
                              disabled={!isEditing}
                            />
                          </>
                        )}
                      </div>
                    ))}
                  </div>
                </div>

                {/* Social Media */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Social Media</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Facebook
                      </label>
                      <div className="relative">
                        <Facebook className="absolute left-3 top-3 h-5 w-5 text-blue-600" />
                        <input
                          type="url"
                          value={profile.social_media.facebook}
                          onChange={(e) => handleSocialMediaChange('facebook', e.target.value)}
                          className="input-field pl-10"
                          placeholder="https://facebook.com/yourpage"
                          disabled={!isEditing}
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Instagram
                      </label>
                      <div className="relative">
                        <Instagram className="absolute left-3 top-3 h-5 w-5 text-pink-600" />
                        <input
                          type="url"
                          value={profile.social_media.instagram}
                          onChange={(e) => handleSocialMediaChange('instagram', e.target.value)}
                          className="input-field pl-10"
                          placeholder="https://instagram.com/yourpage"
                          disabled={!isEditing}
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Twitter
                      </label>
                      <div className="relative">
                        <Twitter className="absolute left-3 top-3 h-5 w-5 text-blue-400" />
                        <input
                          type="url"
                          value={profile.social_media.twitter}
                          onChange={(e) => handleSocialMediaChange('twitter', e.target.value)}
                          className="input-field pl-10"
                          placeholder="https://twitter.com/yourpage"
                          disabled={!isEditing}
                        />
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        LinkedIn
                      </label>
                      <div className="relative">
                        <Linkedin className="absolute left-3 top-3 h-5 w-5 text-blue-700" />
                        <input
                          type="url"
                          value={profile.social_media.linkedin}
                          onChange={(e) => handleSocialMediaChange('linkedin', e.target.value)}
                          className="input-field pl-10"
                          placeholder="https://linkedin.com/company/yourcompany"
                          disabled={!isEditing}
                        />
                      </div>
                    </div>
                  </div>
                </div>

                {/* Services & Specialties */}
                <div>
                  <h3 className="text-lg font-semibold text-gray-900 mb-4">Services & Specialties</h3>
                  <div className="space-y-4">
                    {/* Services */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Services Offered
                      </label>
                      <div className="flex space-x-2 mb-2">
                        <input
                          type="text"
                          value={newService}
                          onChange={(e) => setNewService(e.target.value)}
                          className="input-field flex-1"
                          placeholder="Add a service"
                          onKeyPress={(e) => e.key === 'Enter' && addItem('services', newService)}
                          disabled={!isEditing}
                        />
                        <button
                          onClick={() => addItem('services', newService)}
                          className="btn-primary px-4"
                          disabled={!isEditing}
                        >
                          Add
                        </button>
                      </div>
                      <div className="flex flex-wrap gap-2">
                        {profile.services.map((service, index) => (
                          <span
                            key={index}
                            className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-primary/10 text-primary"
                          >
                            {service}
                            <button
                              onClick={() => removeItem('services', index)}
                              className="ml-2 text-primary hover:text-primary-dark"
                              disabled={!isEditing}
                            >
                              ×
                            </button>
                          </span>
                        ))}
                      </div>
                    </div>

                    {/* Specialties */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Specialties
                      </label>
                      <div className="flex space-x-2 mb-2">
                        <input
                          type="text"
                          value={newSpecialty}
                          onChange={(e) => setNewSpecialty(e.target.value)}
                          className="input-field flex-1"
                          placeholder="Add a specialty"
                          onKeyPress={(e) => e.key === 'Enter' && addItem('specialties', newSpecialty)}
                          disabled={!isEditing}
                        />
                        <button
                          onClick={() => addItem('specialties', newSpecialty)}
                          className="btn-primary px-4"
                          disabled={!isEditing}
                        >
                          Add
                        </button>
                      </div>
                      <div className="flex flex-wrap gap-2">
                        {profile.specialties.map((specialty, index) => (
                          <span
                            key={index}
                            className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-secondary/10 text-secondary"
                          >
                            {specialty}
                            <button
                              onClick={() => removeItem('specialties', index)}
                              className="ml-2 text-secondary hover:text-secondary-dark"
                              disabled={!isEditing}
                            >
                              ×
                            </button>
                          </span>
                        ))}
                      </div>
                    </div>

                    {/* Certifications */}
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-2">
                        Certifications
                      </label>
                      <div className="flex space-x-2 mb-2">
                        <input
                          type="text"
                          value={newCertification}
                          onChange={(e) => setNewCertification(e.target.value)}
                          className="input-field flex-1"
                          placeholder="Add a certification"
                          onKeyPress={(e) => e.key === 'Enter' && addItem('certifications', newCertification)}
                          disabled={!isEditing}
                        />
                        <button
                          onClick={() => addItem('certifications', newCertification)}
                          className="btn-primary px-4"
                          disabled={!isEditing}
                        >
                          Add
                        </button>
                      </div>
                      <div className="flex flex-wrap gap-2">
                        {profile.certifications.map((certification, index) => (
                          <span
                            key={index}
                            className="inline-flex items-center px-3 py-1 rounded-full text-sm bg-green-100 text-green-800"
                          >
                            {certification}
                            <button
                              onClick={() => removeItem('certifications', index)}
                              className="ml-2 text-green-600 hover:text-green-800"
                              disabled={!isEditing}
                            >
                              ×
                            </button>
                          </span>
                        ))}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ) : (
          <div className="mt-8">
            <div className="card">
              <div className="text-center py-8">
                <Building className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">Business Profile System</h3>
                <p className="text-gray-600 mb-4">
                  The business profile system is currently being set up. Please check back later to manage your business details.
                </p>
                <div className="text-sm text-gray-500">
                  This will include company information, contact details, operating hours, and more.
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Membership Status */}
        <div className="mt-8">
          <div className="card">
            <div className="flex items-center space-x-3 mb-4">
              <Shield className="h-6 w-6 text-primary" />
              <h2 className="text-xl font-semibold text-gray-900">Membership Status</h2>
            </div>
            
            <div className="flex items-center justify-between">
              <div className="flex items-center space-x-4">
                <span className={`px-3 py-1 rounded-full text-sm font-medium ${getMembershipStatusColor(getMembershipStatus())}`}>
                  {getMembershipStatus()}
                </span>
                <span className="text-gray-600">
                  {user.membership_tier === 'free' ? 'Basic membership with listing ability' : 'Yearly membership with enhanced benefits'}
                </span>
              </div>
              
              {user.membership_tier === 'free' && (
                <Link href="/membership#membership-plans" className="btn-primary">
                  Upgrade to Yearly Membership
                </Link>
              )}
            </div>
          </div>
        </div>

        {/* TCA Seal */}
        <div className="mt-8">
          <div className="card">
            <div className="flex items-center space-x-3 mb-4">
              <Shield className="h-6 w-6 text-primary" />
              <h2 className="text-xl font-semibold text-gray-900">TCA Seal</h2>
            </div>
            <p className="text-gray-600 text-sm mb-4">
              Download your official TCA seal to display on your website and marketing materials.
            </p>
            <div className="space-y-3">
              <a 
                href="/TRUSTED CLEANERS Logo.png" 
                download="TCA-Seal.png"
                className="btn-outline w-full flex items-center justify-center space-x-2"
              >
                <Download className="h-5 w-5" />
                <span>Download PNG</span>
              </a>
              <button 
                onClick={() => {
                  const htmlCode = `<a href="https://trustedcleaners.org" target="_blank" rel="noopener noreferrer">
  <img src="https://trustedcleaners.org/TRUSTED%20CLEANERS%20Logo.png" 
       alt="Trusted Cleaners Association Member" 
       style="max-width: 200px; height: auto;">
</a>`;
                  navigator.clipboard.writeText(htmlCode);
                  alert('HTML code copied to clipboard!');
                }}
                className="btn-outline w-full flex items-center justify-center space-x-2"
              >
                <Download className="h-5 w-5" />
                <span>Copy HTML Code</span>
              </button>
            </div>
          </div>
        </div>

        {/* Training Access */}
        <div className="mt-8">
          <div className="card">
            <div className="flex items-center space-x-3 mb-4">
              <BookOpen className="h-6 w-6 text-primary" />
              <h2 className="text-xl font-semibold text-gray-900">Training Access</h2>
            </div>
            <p className="text-gray-600 text-sm mb-4">
              Access exclusive training materials and courses designed for TCA members.
            </p>
            <Link href="/training" className="btn-primary">
              Access Training Library
            </Link>
          </div>
        </div>
      </div>
    </div>
  );
}
